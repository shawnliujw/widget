<?xml version="1.0" encoding="UTF-8"?>   
<beans xmlns="http://www.springframework.org/schema/beans"  
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
  xmlns:p="http://www.springframework.org/schema/p"  
  xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/jdbc   
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd"
    default-autowire="byName" default-lazy-init="true">  
 <!-- 注意上面的default-autowire="byName"，如果没有这个声明那么HibernateDaoSupport中的sessionFactory不会被注入 -->  
	<description>define all the basic bean mappings</description>
	<context:annotation-config />
	
	 <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
            <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
                    <property name="dataSource" ref="dataSource" />  
            </bean>  
	<!-- mail sender -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}" />
        <property name="username" value="${mail.username}" />
        <property name="password" value="${mail.password}" />
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="port" value="${mail.smtp.port}" />  
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.enable}</prop>
                <prop key="mail.smtp.socketFactory.fallback">${mail.smtp.fallback}</prop> 
            </props>
        </property>
    </bean>
    
    <!-- mail sender for regaine-->
    <bean id="mailSender4Regaine" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host4Regaine}" />
        <property name="username" value="${mail.username4Regaine}" />
        <property name="password" value="${mail.password4Regaine}" />
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="port" value="${mail.smtp.port4Regaine}" />  
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth4Regaine}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout4Regaine}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.enable4Regaine}</prop>
                <prop key="mail.smtp.socketFactory.fallback">${mail.smtp.fallback4Regaine}</prop> 
            </props>
        </property>
    </bean>
	
	<!-- mail sender -->
	<bean id="mailSenderFotSpkCoupon" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mailForSpkCoupon.host}" />
        <property name="username" value="${mailForSpkCoupon.username}" />
        <property name="password" value="${mailForSpkCoupon.password}" />
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="port" value="${mailForSpkCoupon.smtp.port}" />  
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mailForSpkCoupon.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mailForSpkCoupon.smtp.timeout}</prop>
                <prop key="mail.smtp.starttls.enable">${mailForSpkCoupon.smtp.enable}</prop>
                <prop key="mail.smtp.socketFactory.fallback">${mailForSpkCoupon.smtp.fallback}</prop> 
            </props>
        </property>
    </bean>
	<!--<context:annotation-config />
	--><bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config/log4j.properties</value>
				<value>classpath*:config/mail.properties</value>
				<value>classpath*:config/mailForSpkCoupon.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- for properties files -->
<!-- 	<bean id="propertyConfigurer" -->
<!-- 		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!-- 		<property name="locations"> -->
<!-- 			<list> -->
<!-- 				<value>classpath*:config/jdbc.properties</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->

    
	<!-- mysql -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://192.168.10.254:3306/blowfish_dev?characterEncoding=utf-8"/>
		<property name="username" value="root"/>
		<property name="password" value="mpupawebdb"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在action-servlet.xml中配置的，如果不去除会影响事务管理的。-->
	<context:component-scan base-package="com.mpupa">
		<context:include-filter type="regex" expression="com\.mpupa\.dao\..*"/>
		<context:include-filter type="regex" expression="com\.mpupa\.service\..*"/>
	</context:component-scan>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mpupa.dao" /><!--  配置dao接口目录，让这些接口实现 IBaseDao 即可 -->
	    <property name="markerInterface" value="com.mpupa.dao.IBaseDao"/>
	</bean>
	<!-- 
	 -->
	<!-- Support @Transactional tag -->
	<tx:annotation-driven />

	<!-- 定时任务  -->



<!-- 要调用的工作类 -->
    <bean id="emailJob" class="com.mpupa.utils.EmailNotification">
    	<!-- <property name="statistikDao" ref="statistikDao"></property>
    	<property name="reportDao" ref="reportDao"></property> -->
    </bean>
    <!-- 定义调用对象和调用对象的方法 -->
    <bean id="jobtask"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject">
            <ref bean="emailJob" />
        </property>
        <!-- 调用类中的方法 -->
        <property name="targetMethod">
            <value>sendEmail</value>
        </property>
    </bean>
    <!-- 定义触发时间 -->
    <bean id="doTime"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="jobtask" />
        </property>
        <!-- cron表达式 -->
          <property name="cronExpression">
           <!-- 
           		每天早上 7 点执行 
           -->
           <value>0 0 7 * * ? *</value> 
           <!-- 
           		每天11点到11:59期间和下午6点到6:59期间的每1分钟触发  
           <value>0 0/1 12,18 * * ? </value> 
           -->
           <!-- 
           		每两个小时一次
           <value>0 0 0/2 * * ?</value> 
           -->
       </property>
    </bean>
    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
    <bean id="startQuertz" lazy-init="false" autowire="no"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="doTime" />
            </list>
        </property>
    </bean>
<bean id="userAlertService"  
        class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">  
        <property name="serviceUrl">  
            <value> http://31.222.191.89:8500/consumer/service/consumerHttpServie   
            </value>  
        </property>  
        <property name="serviceInterface" value="com.mpupa.service.IUserAlertService">  
        </property>  
        <property name="httpInvokerRequestExecutor">  
            <bean class="org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor">  
                <property name="readTimeout" value="5000" />  
                <property name="connectTimeout" value="5000" />  
            </bean>  
         </property>  
    </bean> 

</beans>